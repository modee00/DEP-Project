{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/statsmodels/compat/pandas.py:56: FutureWarning: The pandas.core.datetools module is deprecated and will be removed in a future version. Please use the pandas.tseries module instead.\n",
      "  from pandas.core import datetools\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "from sqlalchemy import create_engine\n",
    "from sqlalchemy_utils import database_exists, create_database\n",
    "from fbprophet import Prophet\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pyodbc\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "from datetime import datetime, timedelta\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas.io.sql as psql"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "cnxn = pyodbc.connect(xxxxxx)\n",
    "cursor = cnxn.cursor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pyodbc.Cursor at 0x110bc3ed0>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sql = '''SELECT * FROM dbo.Dim_Borough'''\n",
    "cursor.execute(sql)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(-1, -1, u'UNKNOWN')\n",
      "(1, 1, u'MANHATTAN')\n",
      "(2, 2, u'BRONX')\n",
      "(3, 3, u'BROOKLYN')\n",
      "(4, 4, u'QUEENS')\n",
      "(5, 5, u'STATEN ISLAND')\n",
      "(6, 9, u'OUT OF CITY')\n"
     ]
    }
   ],
   "source": [
    "data = cursor.fetchall()\n",
    "# to fetch the results of a query, but not necessarily put it into a dataframe, use cursor.fetch...\n",
    "for row in data:\n",
    "    print row"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "sql_req_3 = '''\n",
    "SELECT AVG(ConsumptionCF) AS y, ConsumptionDate as ds, Meter_No FROM dbo.Fact_Consumption\n",
    "WHERE (ConsumptionDate BETWEEN '2013-03-01 00:00:00' AND '2016-01-01 00:00:00'\n",
    "AND ConsumptionCF <> 0\n",
    "AND Building_Class_ID = '{0}') GROUP BY Meter_No, ConsumptionDate'''.format('12')\n",
    "cons3 = pd.read_sql(sql_req_3, cnxn)\n",
    "#request training data - average daily consumption - for building type \"12\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sql_req_4 = '''\n",
    "SELECT AVG(ConsumptionCF) AS y, ConsumptionDate as ds, Meter_No FROM dbo.Fact_Consumption\n",
    "WHERE (ConsumptionDate > '2016-01-01 00:00:00'\n",
    "AND ConsumptionCF <> 0\n",
    "AND Building_Class_ID = '{0}') GROUP BY Meter_No, ConsumptionDate'''.format('12')\n",
    "cons4 = pd.read_sql(sql_req_4, cnxn)\n",
    "#request test data - average daily consumption - for building type \"12\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "cons3[\"ds\"] = pd.to_datetime(cons3[\"ds\"])\n",
    "cons3[\"ds\"] = (cons3[\"ds\"]).dt.date\n",
    "cons4[\"ds\"] = pd.to_datetime(cons4[\"ds\"])\n",
    "cons4[\"ds\"] = (cons4[\"ds\"]).dt.date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "cons3a = cons3\n",
    "cons4a = cons4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "cons3a_92 = cons3a.y.quantile(.92)\n",
    "cons3a_8 = cons3a.y.quantile(.08)\n",
    "cons3a = cons3a.loc[cons3a['y'] < cons3a_92]\n",
    "cons3a = cons3a.loc[cons3a['y'] > cons3a_8]\n",
    "#trimming top and bottom .08 quartile to omit erratic values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "cons4a_95 = cons4a.y.quantile(.95)\n",
    "cons4a_5 = cons4a.y.quantile(.05)\n",
    "cons4a = cons4a.loc[cons4a['y'] < cons4a_95]\n",
    "cons4a = cons4a.loc[cons4a['y'] > cons4a_5]\n",
    "#trimming top and bottom .05 quartile to omit erratic values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "N_train = cons3a['Meter_No'].drop_duplicates().count()\n",
    "#count the number of meters in the training set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "N_test = cons4a['Meter_No'].drop_duplicates().count()\n",
    "#count the number of meters in the test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "fb_cons3 = pd.DataFrame(cons3a.groupby(['ds'])['y'].mean())\n",
    "fb_cons3['ds'] = fb_cons3.index\n",
    "fb_cons3 = fb_cons3.reset_index(drop=True)\n",
    "fb_cons3=fb_cons3.sort_values('ds')\n",
    "fb_cons3[\"ds\"] = pd.to_datetime(fb_cons3[\"ds\"])\n",
    "#formatting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "fb_cons4 = pd.DataFrame(cons4a.groupby(['ds'])['y'].mean())\n",
    "fb_cons4['ds'] = fb_cons4.index\n",
    "fb_cons4 = fb_cons4.reset_index(drop=True)\n",
    "fb_cons4=fb_cons4.sort_values('ds')\n",
    "fb_cons4[\"ds\"] = pd.to_datetime(fb_cons4[\"ds\"])\n",
    "#formatting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "m = Prophet(yearly_seasonality=True)\n",
    "m.fit(fb_cons3)\n",
    "future = m.make_future_dataframe(periods=(fb_cons4.shape[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "forecast = m.predict(future)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "predict_2016 = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']]\n",
    "cons_2016 = pd.concat([fb_cons3,fb_cons4],axis=0)\n",
    "cons_2016[\"ds\"] = pd.to_datetime(cons_2016[\"ds\"])\n",
    "all_2016 = pd.merge(cons_2016,predict_2016,left_on='ds',right_on='ds',how='left')\n",
    "#concatenated table of date, predicted data, and confidence intervals for training and forecast data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "t1=pd.DataFrame({'year': [2016],'month': [1],'day': [1]})\n",
    "t1 = pd.to_datetime(t1).dt.date\n",
    "#beginning of forecast data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "y_16_true = all_2016.loc[all_2016['ds'] >= t1[0], ['y','ds']]\n",
    "y_16_predict = all_2016.loc[all_2016['ds'] >= t1[0], ['yhat','ds','yhat_lower','yhat_upper']]\n",
    "y_train_true = all_2016.loc[all_2016['ds'] < t1[0], ['y','ds']]\n",
    "y_train_predict = all_2016.loc[all_2016['ds'] < t1[0], ['yhat','ds','yhat_lower','yhat_upper']]\n",
    "#extracting variables for calculating mean absolute error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "mae_test = mean_absolute_error(y_16_true.y, y_16_predict.yhat)\n",
    "yyhatmean = ((y_16_true['y']+y_16_predict['yhat']).mean())/2\n",
    "test_mae = (\"{:.2%}\".format(mae_test/yyhatmean))\n",
    "#mean absolute error for forecast data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "mae_train = mean_absolute_error(y_train_true.y, y_train_predict.yhat)\n",
    "yyhatmean_train = ((y_train_true['y']+y_train_predict['yhat']).mean())/2\n",
    "train_mae = (\"{:.2%}\".format(mae_train/yyhatmean_train))\n",
    "#mean absolute error for training data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "all_2016 = all_2016.sort_values('ds')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "yhl_train = y_train_predict.yhat_lower.tolist()\n",
    "yhu_train = y_train_predict.yhat_upper.tolist()\n",
    "dates_train = y_train_predict.ds.tolist()\n",
    "yhl_predict = y_16_predict.yhat_lower.tolist()\n",
    "yhu_predict = y_16_predict.yhat_upper.tolist()\n",
    "dates_predict = y_16_predict.ds.tolist()\n",
    "#extracting variables for plottiing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fig = plt.figure()\n",
    "\n",
    "plt.plot(all_2016.ds,all_2016.y,'.k',label='Observed consumption')\n",
    "plt.plot(y_train_predict.ds,y_train_predict.yhat,color = '#003399',label='Fit cons.')\n",
    "plt.plot(y_16_predict.ds,y_16_predict.yhat,color = '#009900',label='Forecast cons.')\n",
    "plt.fill_between(dates_train,yhl_train,yhu_train,color = '#66CCFF', alpha=0.7,label='Fit confidence interval')\n",
    "plt.fill_between(dates_predict,yhl_predict,yhu_predict,color = '#28E528', alpha = 0.7,label='Forecast confidence interval')\n",
    "\n",
    "plt.ylabel('Consumption (Cubic Feet)')\n",
    "plt.ylim((min(y_16_predict.yhat_lower.min()-(3*np.std(y_16_predict.yhat_lower)),\n",
    "     y_train_predict.yhat_lower.min()-(3*np.std(y_train_predict.yhat_lower))),\n",
    "         max (y_16_predict.yhat_upper.max()+(3*np.std(y_16_predict.yhat_upper)),\n",
    "     y_train_predict.yhat_upper.max()+(3*np.std(y_train_predict.yhat_upper)))))\n",
    "#limits the y axis to show values within standard range for training and forecast data\n",
    "\n",
    "plt.legend(loc='best')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
